// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: role_permission.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRolePermission = `-- name: CreateRolePermission :one
INSERT INTO role_permissions (
  role_id,
  permission_id
) VALUES (
  $1, $2
) RETURNING role_id, permission_id
`

type CreateRolePermissionParams struct {
	RoleID       pgtype.Int4 `json:"role_id"`
	PermissionID pgtype.Int4 `json:"permission_id"`
}

func (q *Queries) CreateRolePermission(ctx context.Context, arg CreateRolePermissionParams) (RolePermission, error) {
	row := q.db.QueryRow(ctx, createRolePermission, arg.RoleID, arg.PermissionID)
	var i RolePermission
	err := row.Scan(&i.RoleID, &i.PermissionID)
	return i, err
}

const deleteRolePermission = `-- name: DeleteRolePermission :exec
DELETE FROM role_permissions
WHERE role_id = $1 AND permission_id = $2
`

type DeleteRolePermissionParams struct {
	RoleID       pgtype.Int4 `json:"role_id"`
	PermissionID pgtype.Int4 `json:"permission_id"`
}

func (q *Queries) DeleteRolePermission(ctx context.Context, arg DeleteRolePermissionParams) error {
	_, err := q.db.Exec(ctx, deleteRolePermission, arg.RoleID, arg.PermissionID)
	return err
}

const getRolePermission = `-- name: GetRolePermission :one
SELECT role_id, permission_id FROM role_permissions
WHERE role_id = $1 AND permission_id = $2
LIMIT 1
`

type GetRolePermissionParams struct {
	RoleID       pgtype.Int4 `json:"role_id"`
	PermissionID pgtype.Int4 `json:"permission_id"`
}

func (q *Queries) GetRolePermission(ctx context.Context, arg GetRolePermissionParams) (RolePermission, error) {
	row := q.db.QueryRow(ctx, getRolePermission, arg.RoleID, arg.PermissionID)
	var i RolePermission
	err := row.Scan(&i.RoleID, &i.PermissionID)
	return i, err
}

const listRolePermissions = `-- name: ListRolePermissions :many
SELECT role_id, permission_id FROM role_permissions
`

func (q *Queries) ListRolePermissions(ctx context.Context) ([]RolePermission, error) {
	rows, err := q.db.Query(ctx, listRolePermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RolePermission{}
	for rows.Next() {
		var i RolePermission
		if err := rows.Scan(&i.RoleID, &i.PermissionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRolePermission = `-- name: UpdateRolePermission :one
UPDATE role_permissions
SET role_id = $1, permission_id = $2
WHERE role_id = $3 AND permission_id = $4
RETURNING role_id, permission_id
`

type UpdateRolePermissionParams struct {
	RoleID         pgtype.Int4 `json:"role_id"`
	PermissionID   pgtype.Int4 `json:"permission_id"`
	RoleID_2       pgtype.Int4 `json:"role_id_2"`
	PermissionID_2 pgtype.Int4 `json:"permission_id_2"`
}

func (q *Queries) UpdateRolePermission(ctx context.Context, arg UpdateRolePermissionParams) (RolePermission, error) {
	row := q.db.QueryRow(ctx, updateRolePermission,
		arg.RoleID,
		arg.PermissionID,
		arg.RoleID_2,
		arg.PermissionID_2,
	)
	var i RolePermission
	err := row.Scan(&i.RoleID, &i.PermissionID)
	return i, err
}
