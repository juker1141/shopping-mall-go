// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  account,
  email,
  full_name,
  gender_id,
  cellphone,
  address,
  shipping_address,
  post_code,
  hashed_password,
  status,
  avatar_url
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, account, email, full_name, gender_id, cellphone, address, shipping_address, post_code, hashed_password, status, avatar_url, password_changed_at, created_at
`

type CreateUserParams struct {
	Account         string      `json:"account"`
	Email           string      `json:"email"`
	FullName        string      `json:"full_name"`
	GenderID        pgtype.Int4 `json:"gender_id"`
	Cellphone       string      `json:"cellphone"`
	Address         string      `json:"address"`
	ShippingAddress string      `json:"shipping_address"`
	PostCode        string      `json:"post_code"`
	HashedPassword  string      `json:"hashed_password"`
	Status          int32       `json:"status"`
	AvatarUrl       string      `json:"avatar_url"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Account,
		arg.Email,
		arg.FullName,
		arg.GenderID,
		arg.Cellphone,
		arg.Address,
		arg.ShippingAddress,
		arg.PostCode,
		arg.HashedPassword,
		arg.Status,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Account,
		&i.Email,
		&i.FullName,
		&i.GenderID,
		&i.Cellphone,
		&i.Address,
		&i.ShippingAddress,
		&i.PostCode,
		&i.HashedPassword,
		&i.Status,
		&i.AvatarUrl,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, account, email, full_name, gender_id, cellphone, address, shipping_address, post_code, hashed_password, status, avatar_url, password_changed_at, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Account,
		&i.Email,
		&i.FullName,
		&i.GenderID,
		&i.Cellphone,
		&i.Address,
		&i.ShippingAddress,
		&i.PostCode,
		&i.HashedPassword,
		&i.Status,
		&i.AvatarUrl,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByAccount = `-- name: GetUserByAccount :one
SELECT id, account, email, full_name, gender_id, cellphone, address, shipping_address, post_code, hashed_password, status, avatar_url, password_changed_at, created_at FROM users
WHERE account = $1 LIMIT 1
`

func (q *Queries) GetUserByAccount(ctx context.Context, account string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByAccount, account)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Account,
		&i.Email,
		&i.FullName,
		&i.GenderID,
		&i.Cellphone,
		&i.Address,
		&i.ShippingAddress,
		&i.PostCode,
		&i.HashedPassword,
		&i.Status,
		&i.AvatarUrl,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUsersCount = `-- name: GetUsersCount :one
SELECT COUNT(*) FROM users
`

func (q *Queries) GetUsersCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getUsersCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, account, email, full_name, gender_id, cellphone, address, shipping_address, post_code, hashed_password, status, avatar_url, password_changed_at, created_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Account,
			&i.Email,
			&i.FullName,
			&i.GenderID,
			&i.Cellphone,
			&i.Address,
			&i.ShippingAddress,
			&i.PostCode,
			&i.HashedPassword,
			&i.Status,
			&i.AvatarUrl,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
  hashed_password = COALESCE($1, hashed_password),
  password_changed_at = COALESCE($2, password_changed_at),
  full_name = COALESCE($3, full_name),
  cellphone = COALESCE($4, cellphone),
  address = COALESCE($5, address),
  shipping_address = COALESCE($6, shipping_address),
  post_code = COALESCE($7, post_code),
  avatar_url = COALESCE($8, avatar_url),
  status = COALESCE($9, status)
WHERE
  id = $10
RETURNING id, account, email, full_name, gender_id, cellphone, address, shipping_address, post_code, hashed_password, status, avatar_url, password_changed_at, created_at
`

type UpdateUserParams struct {
	HashedPassword    pgtype.Text        `json:"hashed_password"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	FullName          pgtype.Text        `json:"full_name"`
	Cellphone         pgtype.Text        `json:"cellphone"`
	Address           pgtype.Text        `json:"address"`
	ShippingAddress   pgtype.Text        `json:"shipping_address"`
	PostCode          pgtype.Text        `json:"post_code"`
	AvatarUrl         pgtype.Text        `json:"avatar_url"`
	Status            pgtype.Int4        `json:"status"`
	ID                int64              `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.FullName,
		arg.Cellphone,
		arg.Address,
		arg.ShippingAddress,
		arg.PostCode,
		arg.AvatarUrl,
		arg.Status,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Account,
		&i.Email,
		&i.FullName,
		&i.GenderID,
		&i.Cellphone,
		&i.Address,
		&i.ShippingAddress,
		&i.PostCode,
		&i.HashedPassword,
		&i.Status,
		&i.AvatarUrl,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
