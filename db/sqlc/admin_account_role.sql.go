// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: admin_account_role.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAdminUserRole = `-- name: CreateAdminUserRole :one
INSERT INTO admin_user_roles (
  admin_user_id,
  role_id
)
VALUES (
  $1, $2
) RETURNING admin_user_id, role_id
`

type CreateAdminUserRoleParams struct {
	AdminUserID pgtype.Int4 `json:"admin_user_id"`
	RoleID      pgtype.Int4 `json:"role_id"`
}

func (q *Queries) CreateAdminUserRole(ctx context.Context, arg CreateAdminUserRoleParams) (AdminUserRole, error) {
	row := q.db.QueryRow(ctx, createAdminUserRole, arg.AdminUserID, arg.RoleID)
	var i AdminUserRole
	err := row.Scan(&i.AdminUserID, &i.RoleID)
	return i, err
}

const deleteAdminUserRole = `-- name: DeleteAdminUserRole :exec
DELETE FROM admin_user_roles
WHERE admin_user_id = $1 AND role_id = $2
`

type DeleteAdminUserRoleParams struct {
	AdminUserID pgtype.Int4 `json:"admin_user_id"`
	RoleID      pgtype.Int4 `json:"role_id"`
}

func (q *Queries) DeleteAdminUserRole(ctx context.Context, arg DeleteAdminUserRoleParams) error {
	_, err := q.db.Exec(ctx, deleteAdminUserRole, arg.AdminUserID, arg.RoleID)
	return err
}

const getAdminUserRole = `-- name: GetAdminUserRole :one
SELECT admin_user_id, role_id FROM admin_user_roles
WHERE admin_user_id = $1 AND role_id = $2
LIMIT 1
`

type GetAdminUserRoleParams struct {
	AdminUserID pgtype.Int4 `json:"admin_user_id"`
	RoleID      pgtype.Int4 `json:"role_id"`
}

func (q *Queries) GetAdminUserRole(ctx context.Context, arg GetAdminUserRoleParams) (AdminUserRole, error) {
	row := q.db.QueryRow(ctx, getAdminUserRole, arg.AdminUserID, arg.RoleID)
	var i AdminUserRole
	err := row.Scan(&i.AdminUserID, &i.RoleID)
	return i, err
}

const listAdminUserRoles = `-- name: ListAdminUserRoles :many
SELECT admin_user_id, role_id FROM admin_user_roles
`

func (q *Queries) ListAdminUserRoles(ctx context.Context) ([]AdminUserRole, error) {
	rows, err := q.db.Query(ctx, listAdminUserRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AdminUserRole{}
	for rows.Next() {
		var i AdminUserRole
		if err := rows.Scan(&i.AdminUserID, &i.RoleID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdminUserRole = `-- name: UpdateAdminUserRole :one
UPDATE admin_user_roles
SET admin_user_id = $1, role_id = $2
WHERE admin_user_id = $3 AND role_id = $4
RETURNING admin_user_id, role_id
`

type UpdateAdminUserRoleParams struct {
	AdminUserID   pgtype.Int4 `json:"admin_user_id"`
	RoleID        pgtype.Int4 `json:"role_id"`
	AdminUserID_2 pgtype.Int4 `json:"admin_user_id_2"`
	RoleID_2      pgtype.Int4 `json:"role_id_2"`
}

func (q *Queries) UpdateAdminUserRole(ctx context.Context, arg UpdateAdminUserRoleParams) (AdminUserRole, error) {
	row := q.db.QueryRow(ctx, updateAdminUserRole,
		arg.AdminUserID,
		arg.RoleID,
		arg.AdminUserID_2,
		arg.RoleID_2,
	)
	var i AdminUserRole
	err := row.Scan(&i.AdminUserID, &i.RoleID)
	return i, err
}
