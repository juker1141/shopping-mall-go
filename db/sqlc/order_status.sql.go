// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: order_status.sql

package db

import (
	"context"
)

const createOrderStatus = `-- name: CreateOrderStatus :one
INSERT INTO order_status (
  name,
  description
) VALUES (
  $1, $2
) RETURNING id, name, description
`

type CreateOrderStatusParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateOrderStatus(ctx context.Context, arg CreateOrderStatusParams) (OrderStatus, error) {
	row := q.db.QueryRow(ctx, createOrderStatus, arg.Name, arg.Description)
	var i OrderStatus
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getOrderStatus = `-- name: GetOrderStatus :one
SELECT id, name, description FROM order_status
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrderStatus(ctx context.Context, id int64) (OrderStatus, error) {
	row := q.db.QueryRow(ctx, getOrderStatus, id)
	var i OrderStatus
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getOrderStatusCount = `-- name: GetOrderStatusCount :one
SELECT COUNT(*) FROM order_status
`

func (q *Queries) GetOrderStatusCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getOrderStatusCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listOrderStatus = `-- name: ListOrderStatus :many
SELECT id, name, description FROM order_status
ORDER BY id
`

func (q *Queries) ListOrderStatus(ctx context.Context) ([]OrderStatus, error) {
	rows, err := q.db.Query(ctx, listOrderStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderStatus{}
	for rows.Next() {
		var i OrderStatus
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
