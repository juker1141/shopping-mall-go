// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: order_coupon.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrderCoupon = `-- name: CreateOrderCoupon :one
INSERT INTO order_coupons (
  order_id,
  coupon_id
) VALUES (
  $1, $2
) RETURNING order_id, coupon_id
`

type CreateOrderCouponParams struct {
	OrderID  pgtype.Int4 `json:"order_id"`
	CouponID pgtype.Int4 `json:"coupon_id"`
}

func (q *Queries) CreateOrderCoupon(ctx context.Context, arg CreateOrderCouponParams) (OrderCoupon, error) {
	row := q.db.QueryRow(ctx, createOrderCoupon, arg.OrderID, arg.CouponID)
	var i OrderCoupon
	err := row.Scan(&i.OrderID, &i.CouponID)
	return i, err
}

const deleteOrderCouponByCouponId = `-- name: DeleteOrderCouponByCouponId :exec
DELETE FROM order_coupons
WHERE coupon_id = $1
`

func (q *Queries) DeleteOrderCouponByCouponId(ctx context.Context, couponID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteOrderCouponByCouponId, couponID)
	return err
}

const deleteOrderCouponByOrderId = `-- name: DeleteOrderCouponByOrderId :exec
DELETE FROM order_coupons
WHERE order_id = $1
`

func (q *Queries) DeleteOrderCouponByOrderId(ctx context.Context, orderID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteOrderCouponByOrderId, orderID)
	return err
}

const getOrderCoupon = `-- name: GetOrderCoupon :one
SELECT order_id, coupon_id FROM order_coupons
WHERE order_id = $1 AND coupon_id = $2
LIMIT 1
`

type GetOrderCouponParams struct {
	OrderID  pgtype.Int4 `json:"order_id"`
	CouponID pgtype.Int4 `json:"coupon_id"`
}

func (q *Queries) GetOrderCoupon(ctx context.Context, arg GetOrderCouponParams) (OrderCoupon, error) {
	row := q.db.QueryRow(ctx, getOrderCoupon, arg.OrderID, arg.CouponID)
	var i OrderCoupon
	err := row.Scan(&i.OrderID, &i.CouponID)
	return i, err
}

const listOrderCouponByCouponId = `-- name: ListOrderCouponByCouponId :many
SELECT order_id, coupon_id FROM order_coupons
WHERE coupon_id = $1
`

func (q *Queries) ListOrderCouponByCouponId(ctx context.Context, couponID pgtype.Int4) ([]OrderCoupon, error) {
	rows, err := q.db.Query(ctx, listOrderCouponByCouponId, couponID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderCoupon{}
	for rows.Next() {
		var i OrderCoupon
		if err := rows.Scan(&i.OrderID, &i.CouponID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrderCouponByOrderId = `-- name: ListOrderCouponByOrderId :many
SELECT order_id, coupon_id FROM order_coupons
WHERE order_id = $1
`

func (q *Queries) ListOrderCouponByOrderId(ctx context.Context, orderID pgtype.Int4) ([]OrderCoupon, error) {
	rows, err := q.db.Query(ctx, listOrderCouponByOrderId, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderCoupon{}
	for rows.Next() {
		var i OrderCoupon
		if err := rows.Scan(&i.OrderID, &i.CouponID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
