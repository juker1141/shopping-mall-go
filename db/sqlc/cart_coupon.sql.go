// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: cart_coupon.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkCartCouponExists = `-- name: CheckCartCouponExists :one
SELECT EXISTS (
  SELECT 1
  FROM cart_coupons
  WHERE cart_id = $1
)
`

func (q *Queries) CheckCartCouponExists(ctx context.Context, cartID pgtype.Int4) (bool, error) {
	row := q.db.QueryRow(ctx, checkCartCouponExists, cartID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createCartCoupon = `-- name: CreateCartCoupon :one
INSERT INTO cart_coupons (
  cart_id,
  coupon_id
) VALUES (
  $1, $2
) RETURNING cart_id, coupon_id
`

type CreateCartCouponParams struct {
	CartID   pgtype.Int4 `json:"cart_id"`
	CouponID pgtype.Int4 `json:"coupon_id"`
}

func (q *Queries) CreateCartCoupon(ctx context.Context, arg CreateCartCouponParams) (CartCoupon, error) {
	row := q.db.QueryRow(ctx, createCartCoupon, arg.CartID, arg.CouponID)
	var i CartCoupon
	err := row.Scan(&i.CartID, &i.CouponID)
	return i, err
}

const deleteCartCouponByCartId = `-- name: DeleteCartCouponByCartId :exec
DELETE FROM cart_coupons
WHERE cart_id = $1
`

func (q *Queries) DeleteCartCouponByCartId(ctx context.Context, cartID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteCartCouponByCartId, cartID)
	return err
}

const deleteCartCouponByCouponId = `-- name: DeleteCartCouponByCouponId :exec
DELETE FROM cart_coupons
WHERE coupon_id = $1
`

func (q *Queries) DeleteCartCouponByCouponId(ctx context.Context, couponID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteCartCouponByCouponId, couponID)
	return err
}

const getCartCoupon = `-- name: GetCartCoupon :one
SELECT cart_id, coupon_id FROM cart_coupons
WHERE cart_id = $1 AND coupon_id = $2
LIMIT 1
`

type GetCartCouponParams struct {
	CartID   pgtype.Int4 `json:"cart_id"`
	CouponID pgtype.Int4 `json:"coupon_id"`
}

func (q *Queries) GetCartCoupon(ctx context.Context, arg GetCartCouponParams) (CartCoupon, error) {
	row := q.db.QueryRow(ctx, getCartCoupon, arg.CartID, arg.CouponID)
	var i CartCoupon
	err := row.Scan(&i.CartID, &i.CouponID)
	return i, err
}

const listCartCouponByCartId = `-- name: ListCartCouponByCartId :many
SELECT cart_id, coupon_id FROM cart_coupons
WHERE cart_id = $1
`

func (q *Queries) ListCartCouponByCartId(ctx context.Context, cartID pgtype.Int4) ([]CartCoupon, error) {
	rows, err := q.db.Query(ctx, listCartCouponByCartId, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CartCoupon{}
	for rows.Next() {
		var i CartCoupon
		if err := rows.Scan(&i.CartID, &i.CouponID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCartCouponByCouponId = `-- name: ListCartCouponByCouponId :many
SELECT cart_id, coupon_id FROM cart_coupons
WHERE coupon_id = $1
`

func (q *Queries) ListCartCouponByCouponId(ctx context.Context, couponID pgtype.Int4) ([]CartCoupon, error) {
	rows, err := q.db.Query(ctx, listCartCouponByCouponId, couponID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CartCoupon{}
	for rows.Next() {
		var i CartCoupon
		if err := rows.Scan(&i.CartID, &i.CouponID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
