// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: product_category.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProductCategory = `-- name: CreateProductCategory :one
INSERT INTO product_categories (
  product_id,
  category_id
) VALUES (
  $1, $2
) RETURNING product_id, category_id
`

type CreateProductCategoryParams struct {
	ProductID  pgtype.Int4 `json:"product_id"`
	CategoryID pgtype.Int4 `json:"category_id"`
}

func (q *Queries) CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) (ProductCategory, error) {
	row := q.db.QueryRow(ctx, createProductCategory, arg.ProductID, arg.CategoryID)
	var i ProductCategory
	err := row.Scan(&i.ProductID, &i.CategoryID)
	return i, err
}

const deleteProductCategoryByCategoryId = `-- name: DeleteProductCategoryByCategoryId :exec
DELETE FROM product_categories
WHERE category_id = $1
`

func (q *Queries) DeleteProductCategoryByCategoryId(ctx context.Context, categoryID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteProductCategoryByCategoryId, categoryID)
	return err
}

const deleteProductCategoryByProductId = `-- name: DeleteProductCategoryByProductId :exec
DELETE FROM product_categories
WHERE product_id = $1
`

func (q *Queries) DeleteProductCategoryByProductId(ctx context.Context, productID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteProductCategoryByProductId, productID)
	return err
}

const getProductCategory = `-- name: GetProductCategory :one
SELECT product_id, category_id FROM product_categories
WHERE product_id = $1 AND category_id = $2
LIMIT 1
`

type GetProductCategoryParams struct {
	ProductID  pgtype.Int4 `json:"product_id"`
	CategoryID pgtype.Int4 `json:"category_id"`
}

func (q *Queries) GetProductCategory(ctx context.Context, arg GetProductCategoryParams) (ProductCategory, error) {
	row := q.db.QueryRow(ctx, getProductCategory, arg.ProductID, arg.CategoryID)
	var i ProductCategory
	err := row.Scan(&i.ProductID, &i.CategoryID)
	return i, err
}

const listProductCategoryByCategoryId = `-- name: ListProductCategoryByCategoryId :many
SELECT product_id, category_id FROM product_categories
WHERE category_id = $1
`

func (q *Queries) ListProductCategoryByCategoryId(ctx context.Context, categoryID pgtype.Int4) ([]ProductCategory, error) {
	rows, err := q.db.Query(ctx, listProductCategoryByCategoryId, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductCategory{}
	for rows.Next() {
		var i ProductCategory
		if err := rows.Scan(&i.ProductID, &i.CategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductCategoryByProductId = `-- name: ListProductCategoryByProductId :many
SELECT product_id, category_id FROM product_categories
WHERE product_id = $1
`

func (q *Queries) ListProductCategoryByProductId(ctx context.Context, productID pgtype.Int4) ([]ProductCategory, error) {
	rows, err := q.db.Query(ctx, listProductCategoryByProductId, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductCategory{}
	for rows.Next() {
		var i ProductCategory
		if err := rows.Scan(&i.ProductID, &i.CategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
