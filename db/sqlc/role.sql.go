// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: role.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
  name
) VALUES (
  $1
) RETURNING id, name, created_at
`

func (q *Queries) CreateRole(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, name)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
SELECT id, name, created_at FROM roles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, id int64) (Role, error) {
	row := q.db.QueryRow(ctx, getRole, id)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getRolesCount = `-- name: GetRolesCount :one
SELECT COUNT(*) FROM roles
`

func (q *Queries) GetRolesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getRolesCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listPermissionForRole = `-- name: ListPermissionForRole :many
SELECT DISTINCT p.id, p.name, p.created_at
FROM roles AS r
JOIN role_permissions AS rp ON r.id = rp.role_id
JOIN permissions AS p ON rp.permission_id = p.id
WHERE r.id = $1
`

func (q *Queries) ListPermissionForRole(ctx context.Context, id int64) ([]Permission, error) {
	rows, err := q.db.Query(ctx, listPermissionForRole, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoles = `-- name: ListRoles :many
SELECT id, name, created_at FROM roles
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRoles(ctx context.Context, arg ListRolesParams) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles
SET
  name = COALESCE($1, name)
WHERE
  id = $2
RETURNING id, name, created_at
`

type UpdateRoleParams struct {
	Name pgtype.Text `json:"name"`
	ID   int64       `json:"id"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole, arg.Name, arg.ID)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
