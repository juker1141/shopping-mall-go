// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: pay_method.sql

package db

import (
	"context"
)

const createPayMethod = `-- name: CreatePayMethod :one
INSERT INTO pay_methods (
  name
) VALUES (
  $1
) RETURNING id, name
`

func (q *Queries) CreatePayMethod(ctx context.Context, name string) (PayMethod, error) {
	row := q.db.QueryRow(ctx, createPayMethod, name)
	var i PayMethod
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPayMethod = `-- name: GetPayMethod :one
SELECT id, name FROM pay_methods
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPayMethod(ctx context.Context, id int64) (PayMethod, error) {
	row := q.db.QueryRow(ctx, getPayMethod, id)
	var i PayMethod
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPayMethodCount = `-- name: GetPayMethodCount :one
SELECT COUNT(*) FROM pay_methods
`

func (q *Queries) GetPayMethodCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getPayMethodCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listPayMethod = `-- name: ListPayMethod :many
SELECT id, name FROM pay_methods
ORDER BY id
`

func (q *Queries) ListPayMethod(ctx context.Context) ([]PayMethod, error) {
	rows, err := q.db.Query(ctx, listPayMethod)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PayMethod{}
	for rows.Next() {
		var i PayMethod
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
