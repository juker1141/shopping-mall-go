// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: order_user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrderUser = `-- name: CreateOrderUser :one
INSERT INTO order_users (
  order_id,
  user_id
) VALUES (
  $1, $2
) RETURNING order_id, user_id
`

type CreateOrderUserParams struct {
	OrderID pgtype.Int4 `json:"order_id"`
	UserID  pgtype.Int4 `json:"user_id"`
}

func (q *Queries) CreateOrderUser(ctx context.Context, arg CreateOrderUserParams) (OrderUser, error) {
	row := q.db.QueryRow(ctx, createOrderUser, arg.OrderID, arg.UserID)
	var i OrderUser
	err := row.Scan(&i.OrderID, &i.UserID)
	return i, err
}

const deleteOrderUserByOrderId = `-- name: DeleteOrderUserByOrderId :exec
DELETE FROM order_users
WHERE order_id = $1
`

func (q *Queries) DeleteOrderUserByOrderId(ctx context.Context, orderID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteOrderUserByOrderId, orderID)
	return err
}

const deleteOrderUserByUserId = `-- name: DeleteOrderUserByUserId :exec
DELETE FROM order_users
WHERE user_id = $1
`

func (q *Queries) DeleteOrderUserByUserId(ctx context.Context, userID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteOrderUserByUserId, userID)
	return err
}

const getOrderUser = `-- name: GetOrderUser :one
SELECT order_id, user_id FROM order_users
WHERE order_id = $1 AND user_id = $2
LIMIT 1
`

type GetOrderUserParams struct {
	OrderID pgtype.Int4 `json:"order_id"`
	UserID  pgtype.Int4 `json:"user_id"`
}

func (q *Queries) GetOrderUser(ctx context.Context, arg GetOrderUserParams) (OrderUser, error) {
	row := q.db.QueryRow(ctx, getOrderUser, arg.OrderID, arg.UserID)
	var i OrderUser
	err := row.Scan(&i.OrderID, &i.UserID)
	return i, err
}

const listOrderUserByOrderId = `-- name: ListOrderUserByOrderId :many
SELECT order_id, user_id FROM order_users
WHERE order_id = $1
`

func (q *Queries) ListOrderUserByOrderId(ctx context.Context, orderID pgtype.Int4) ([]OrderUser, error) {
	rows, err := q.db.Query(ctx, listOrderUserByOrderId, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderUser{}
	for rows.Next() {
		var i OrderUser
		if err := rows.Scan(&i.OrderID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrderUserByUserId = `-- name: ListOrderUserByUserId :many
SELECT order_id, user_id FROM order_users
WHERE user_id = $1
`

func (q *Queries) ListOrderUserByUserId(ctx context.Context, userID pgtype.Int4) ([]OrderUser, error) {
	rows, err := q.db.Query(ctx, listOrderUserByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderUser{}
	for rows.Next() {
		var i OrderUser
		if err := rows.Scan(&i.OrderID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
