// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: order.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  status_id
) VALUES (
  $1
) RETURNING id, is_paid, status_id, created_at, updated_at
`

func (q *Queries) CreateOrder(ctx context.Context, statusID pgtype.Int4) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, statusID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.IsPaid,
		&i.StatusID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, is_paid, status_id, created_at, updated_at FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.IsPaid,
		&i.StatusID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrdersCount = `-- name: GetOrdersCount :one
SELECT COUNT(*) FROM orders
`

func (q *Queries) GetOrdersCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getOrdersCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listOrders = `-- name: ListOrders :many

SELECT id, is_paid, status_id, created_at, updated_at FROM orders
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// -- name: GetOrderByCode :one
// SELECT * FROM orders
// WHERE code = $1 LIMIT 1;
func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.IsPaid,
			&i.StatusID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET 
  is_paid = COALESCE($1, is_paid),
  status_id = COALESCE($2, status_id),
  updated_at = COALESCE($3, updated_at)
WHERE id = $4
RETURNING id, is_paid, status_id, created_at, updated_at
`

type UpdateOrderParams struct {
	IsPaid    pgtype.Bool        `json:"is_paid"`
	StatusID  pgtype.Int4        `json:"status_id"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	ID        int64              `json:"id"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder,
		arg.IsPaid,
		arg.StatusID,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.IsPaid,
		&i.StatusID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
