// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: cart.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCart = `-- name: CreateCart :one
INSERT INTO carts (
  owner,
  total_price,
  final_price
) VALUES (
  $1, $2, $3
) RETURNING id, owner, total_price, final_price, created_at
`

type CreateCartParams struct {
	Owner      pgtype.Text `json:"owner"`
	TotalPrice int32       `json:"total_price"`
	FinalPrice int32       `json:"final_price"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (Cart, error) {
	row := q.db.QueryRow(ctx, createCart, arg.Owner, arg.TotalPrice, arg.FinalPrice)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.TotalPrice,
		&i.FinalPrice,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCart = `-- name: DeleteCart :exec
DELETE FROM carts WHERE id = $1
`

func (q *Queries) DeleteCart(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCart, id)
	return err
}

const getCart = `-- name: GetCart :one
SELECT id, owner, total_price, final_price, created_at FROM carts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCart(ctx context.Context, id int64) (Cart, error) {
	row := q.db.QueryRow(ctx, getCart, id)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.TotalPrice,
		&i.FinalPrice,
		&i.CreatedAt,
	)
	return i, err
}

const getCartByOwner = `-- name: GetCartByOwner :one
SELECT id, owner, total_price, final_price, created_at FROM carts
WHERE owner = $1 LIMIT 1
`

func (q *Queries) GetCartByOwner(ctx context.Context, owner pgtype.Text) (Cart, error) {
	row := q.db.QueryRow(ctx, getCartByOwner, owner)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.TotalPrice,
		&i.FinalPrice,
		&i.CreatedAt,
	)
	return i, err
}

const updateCart = `-- name: UpdateCart :one

UPDATE carts
SET 
  total_price = $2,
  final_price = $3
WHERE id = $1
RETURNING id, owner, total_price, final_price, created_at
`

type UpdateCartParams struct {
	ID         int64 `json:"id"`
	TotalPrice int32 `json:"total_price"`
	FinalPrice int32 `json:"final_price"`
}

// -- name: ListProductsForCart :many
// SELECT DISTINCT product.id, product.name, product.created_at
// FROM carts as c
// JOIN cart_products AS cp ON c.id = cp.role_id
// JOIN products AS product ON cp.product_id = product.id
// WHERE c.id = $1;
func (q *Queries) UpdateCart(ctx context.Context, arg UpdateCartParams) (Cart, error) {
	row := q.db.QueryRow(ctx, updateCart, arg.ID, arg.TotalPrice, arg.FinalPrice)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.TotalPrice,
		&i.FinalPrice,
		&i.CreatedAt,
	)
	return i, err
}
