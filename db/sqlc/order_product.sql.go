// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: order_product.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrderProduct = `-- name: CreateOrderProduct :one
INSERT INTO order_products (
  order_id,
  product_id
) VALUES (
  $1, $2
) RETURNING order_id, product_id, num
`

type CreateOrderProductParams struct {
	OrderID   pgtype.Int4 `json:"order_id"`
	ProductID pgtype.Int4 `json:"product_id"`
}

func (q *Queries) CreateOrderProduct(ctx context.Context, arg CreateOrderProductParams) (OrderProduct, error) {
	row := q.db.QueryRow(ctx, createOrderProduct, arg.OrderID, arg.ProductID)
	var i OrderProduct
	err := row.Scan(&i.OrderID, &i.ProductID, &i.Num)
	return i, err
}

const deleteOrderProductByOrderId = `-- name: DeleteOrderProductByOrderId :exec
DELETE FROM order_products
WHERE order_id = $1
`

func (q *Queries) DeleteOrderProductByOrderId(ctx context.Context, orderID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteOrderProductByOrderId, orderID)
	return err
}

const deleteOrderProductByProductId = `-- name: DeleteOrderProductByProductId :exec
DELETE FROM order_products
WHERE product_id = $1
`

func (q *Queries) DeleteOrderProductByProductId(ctx context.Context, productID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteOrderProductByProductId, productID)
	return err
}

const getOrderProduct = `-- name: GetOrderProduct :one
SELECT order_id, product_id, num FROM order_products
WHERE order_id = $1 AND product_id = $2
LIMIT 1
`

type GetOrderProductParams struct {
	OrderID   pgtype.Int4 `json:"order_id"`
	ProductID pgtype.Int4 `json:"product_id"`
}

func (q *Queries) GetOrderProduct(ctx context.Context, arg GetOrderProductParams) (OrderProduct, error) {
	row := q.db.QueryRow(ctx, getOrderProduct, arg.OrderID, arg.ProductID)
	var i OrderProduct
	err := row.Scan(&i.OrderID, &i.ProductID, &i.Num)
	return i, err
}

const listOrderProductByOrderId = `-- name: ListOrderProductByOrderId :many
SELECT order_id, product_id, num FROM order_products
WHERE order_id = $1
`

func (q *Queries) ListOrderProductByOrderId(ctx context.Context, orderID pgtype.Int4) ([]OrderProduct, error) {
	rows, err := q.db.Query(ctx, listOrderProductByOrderId, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderProduct{}
	for rows.Next() {
		var i OrderProduct
		if err := rows.Scan(&i.OrderID, &i.ProductID, &i.Num); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrderProductByProductId = `-- name: ListOrderProductByProductId :many
SELECT order_id, product_id, num FROM order_products
WHERE product_id = $1
`

func (q *Queries) ListOrderProductByProductId(ctx context.Context, productID pgtype.Int4) ([]OrderProduct, error) {
	rows, err := q.db.Query(ctx, listOrderProductByProductId, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderProduct{}
	for rows.Next() {
		var i OrderProduct
		if err := rows.Scan(&i.OrderID, &i.ProductID, &i.Num); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
