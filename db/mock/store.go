// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juker1141/shopping-mall-go/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	db "github.com/juker1141/shopping-mall-go/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAdminUser mocks base method.
func (m *MockStore) CreateAdminUser(arg0 context.Context, arg1 db.CreateAdminUserParams) (db.AdminUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdminUser", arg0, arg1)
	ret0, _ := ret[0].(db.AdminUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdminUser indicates an expected call of CreateAdminUser.
func (mr *MockStoreMockRecorder) CreateAdminUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdminUser", reflect.TypeOf((*MockStore)(nil).CreateAdminUser), arg0, arg1)
}

// CreateCart mocks base method.
func (m *MockStore) CreateCart(arg0 context.Context, arg1 db.CreateCartParams) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCart", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockStoreMockRecorder) CreateCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockStore)(nil).CreateCart), arg0, arg1)
}

// CreateCartCoupon mocks base method.
func (m *MockStore) CreateCartCoupon(arg0 context.Context, arg1 db.CreateCartCouponParams) (db.CartCoupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCartCoupon", arg0, arg1)
	ret0, _ := ret[0].(db.CartCoupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCartCoupon indicates an expected call of CreateCartCoupon.
func (mr *MockStoreMockRecorder) CreateCartCoupon(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCartCoupon", reflect.TypeOf((*MockStore)(nil).CreateCartCoupon), arg0, arg1)
}

// CreateCartProduct mocks base method.
func (m *MockStore) CreateCartProduct(arg0 context.Context, arg1 db.CreateCartProductParams) (db.CartProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCartProduct", arg0, arg1)
	ret0, _ := ret[0].(db.CartProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCartProduct indicates an expected call of CreateCartProduct.
func (mr *MockStoreMockRecorder) CreateCartProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCartProduct", reflect.TypeOf((*MockStore)(nil).CreateCartProduct), arg0, arg1)
}

// CreateCoupon mocks base method.
func (m *MockStore) CreateCoupon(arg0 context.Context, arg1 db.CreateCouponParams) (db.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCoupon", arg0, arg1)
	ret0, _ := ret[0].(db.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCoupon indicates an expected call of CreateCoupon.
func (mr *MockStoreMockRecorder) CreateCoupon(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCoupon", reflect.TypeOf((*MockStore)(nil).CreateCoupon), arg0, arg1)
}

// CreateGender mocks base method.
func (m *MockStore) CreateGender(arg0 context.Context, arg1 string) (db.Gender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGender", arg0, arg1)
	ret0, _ := ret[0].(db.Gender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGender indicates an expected call of CreateGender.
func (mr *MockStoreMockRecorder) CreateGender(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGender", reflect.TypeOf((*MockStore)(nil).CreateGender), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockStore) CreateOrder(arg0 context.Context, arg1 db.CreateOrderParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStoreMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStore)(nil).CreateOrder), arg0, arg1)
}

// CreateOrderCoupon mocks base method.
func (m *MockStore) CreateOrderCoupon(arg0 context.Context, arg1 db.CreateOrderCouponParams) (db.OrderCoupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderCoupon", arg0, arg1)
	ret0, _ := ret[0].(db.OrderCoupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderCoupon indicates an expected call of CreateOrderCoupon.
func (mr *MockStoreMockRecorder) CreateOrderCoupon(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderCoupon", reflect.TypeOf((*MockStore)(nil).CreateOrderCoupon), arg0, arg1)
}

// CreateOrderProduct mocks base method.
func (m *MockStore) CreateOrderProduct(arg0 context.Context, arg1 db.CreateOrderProductParams) (db.OrderProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderProduct", arg0, arg1)
	ret0, _ := ret[0].(db.OrderProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderProduct indicates an expected call of CreateOrderProduct.
func (mr *MockStoreMockRecorder) CreateOrderProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderProduct", reflect.TypeOf((*MockStore)(nil).CreateOrderProduct), arg0, arg1)
}

// CreateOrderStatus mocks base method.
func (m *MockStore) CreateOrderStatus(arg0 context.Context, arg1 db.CreateOrderStatusParams) (db.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderStatus", arg0, arg1)
	ret0, _ := ret[0].(db.OrderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderStatus indicates an expected call of CreateOrderStatus.
func (mr *MockStoreMockRecorder) CreateOrderStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderStatus", reflect.TypeOf((*MockStore)(nil).CreateOrderStatus), arg0, arg1)
}

// CreateOrderTx mocks base method.
func (m *MockStore) CreateOrderTx(arg0 context.Context, arg1 db.CreateOrderTxParams) (db.OrderTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderTx", arg0, arg1)
	ret0, _ := ret[0].(db.OrderTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderTx indicates an expected call of CreateOrderTx.
func (mr *MockStoreMockRecorder) CreateOrderTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderTx", reflect.TypeOf((*MockStore)(nil).CreateOrderTx), arg0, arg1)
}

// CreateOrderUser mocks base method.
func (m *MockStore) CreateOrderUser(arg0 context.Context, arg1 db.CreateOrderUserParams) (db.OrderUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderUser", arg0, arg1)
	ret0, _ := ret[0].(db.OrderUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderUser indicates an expected call of CreateOrderUser.
func (mr *MockStoreMockRecorder) CreateOrderUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderUser", reflect.TypeOf((*MockStore)(nil).CreateOrderUser), arg0, arg1)
}

// CreatePayMethod mocks base method.
func (m *MockStore) CreatePayMethod(arg0 context.Context, arg1 string) (db.PayMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayMethod", arg0, arg1)
	ret0, _ := ret[0].(db.PayMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayMethod indicates an expected call of CreatePayMethod.
func (mr *MockStoreMockRecorder) CreatePayMethod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayMethod", reflect.TypeOf((*MockStore)(nil).CreatePayMethod), arg0, arg1)
}

// CreatePermission mocks base method.
func (m *MockStore) CreatePermission(arg0 context.Context, arg1 string) (db.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1)
	ret0, _ := ret[0].(db.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockStoreMockRecorder) CreatePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockStore)(nil).CreatePermission), arg0, arg1)
}

// CreateProduct mocks base method.
func (m *MockStore) CreateProduct(arg0 context.Context, arg1 db.CreateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockStoreMockRecorder) CreateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockStore)(nil).CreateProduct), arg0, arg1)
}

// CreateRole mocks base method.
func (m *MockStore) CreateRole(arg0 context.Context, arg1 string) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockStoreMockRecorder) CreateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockStore)(nil).CreateRole), arg0, arg1)
}

// CreateRolePermission mocks base method.
func (m *MockStore) CreateRolePermission(arg0 context.Context, arg1 db.CreateRolePermissionParams) (db.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRolePermission", arg0, arg1)
	ret0, _ := ret[0].(db.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRolePermission indicates an expected call of CreateRolePermission.
func (mr *MockStoreMockRecorder) CreateRolePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRolePermission", reflect.TypeOf((*MockStore)(nil).CreateRolePermission), arg0, arg1)
}

// CreateRoleTx mocks base method.
func (m *MockStore) CreateRoleTx(arg0 context.Context, arg1 db.CreateRoleTxParams) (db.RoleTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoleTx", arg0, arg1)
	ret0, _ := ret[0].(db.RoleTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoleTx indicates an expected call of CreateRoleTx.
func (mr *MockStoreMockRecorder) CreateRoleTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleTx", reflect.TypeOf((*MockStore)(nil).CreateRoleTx), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams) (db.UserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.UserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), arg0, arg1)
}

// CreateVerifyEmail mocks base method.
func (m *MockStore) CreateVerifyEmail(arg0 context.Context, arg1 db.CreateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmail indicates an expected call of CreateVerifyEmail.
func (mr *MockStoreMockRecorder) CreateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmail", reflect.TypeOf((*MockStore)(nil).CreateVerifyEmail), arg0, arg1)
}

// DeleteAdminUser mocks base method.
func (m *MockStore) DeleteAdminUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdminUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdminUser indicates an expected call of DeleteAdminUser.
func (mr *MockStoreMockRecorder) DeleteAdminUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdminUser", reflect.TypeOf((*MockStore)(nil).DeleteAdminUser), arg0, arg1)
}

// DeleteCart mocks base method.
func (m *MockStore) DeleteCart(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCart indicates an expected call of DeleteCart.
func (mr *MockStoreMockRecorder) DeleteCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCart", reflect.TypeOf((*MockStore)(nil).DeleteCart), arg0, arg1)
}

// DeleteCartCouponByCartId mocks base method.
func (m *MockStore) DeleteCartCouponByCartId(arg0 context.Context, arg1 pgtype.Int4) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartCouponByCartId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCartCouponByCartId indicates an expected call of DeleteCartCouponByCartId.
func (mr *MockStoreMockRecorder) DeleteCartCouponByCartId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartCouponByCartId", reflect.TypeOf((*MockStore)(nil).DeleteCartCouponByCartId), arg0, arg1)
}

// DeleteCartCouponByCouponId mocks base method.
func (m *MockStore) DeleteCartCouponByCouponId(arg0 context.Context, arg1 pgtype.Int4) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartCouponByCouponId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCartCouponByCouponId indicates an expected call of DeleteCartCouponByCouponId.
func (mr *MockStoreMockRecorder) DeleteCartCouponByCouponId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartCouponByCouponId", reflect.TypeOf((*MockStore)(nil).DeleteCartCouponByCouponId), arg0, arg1)
}

// DeleteCartProductByCartId mocks base method.
func (m *MockStore) DeleteCartProductByCartId(arg0 context.Context, arg1 pgtype.Int4) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartProductByCartId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCartProductByCartId indicates an expected call of DeleteCartProductByCartId.
func (mr *MockStoreMockRecorder) DeleteCartProductByCartId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartProductByCartId", reflect.TypeOf((*MockStore)(nil).DeleteCartProductByCartId), arg0, arg1)
}

// DeleteCartProductByProductId mocks base method.
func (m *MockStore) DeleteCartProductByProductId(arg0 context.Context, arg1 pgtype.Int4) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartProductByProductId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCartProductByProductId indicates an expected call of DeleteCartProductByProductId.
func (mr *MockStoreMockRecorder) DeleteCartProductByProductId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartProductByProductId", reflect.TypeOf((*MockStore)(nil).DeleteCartProductByProductId), arg0, arg1)
}

// DeleteCoupon mocks base method.
func (m *MockStore) DeleteCoupon(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCoupon", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCoupon indicates an expected call of DeleteCoupon.
func (mr *MockStoreMockRecorder) DeleteCoupon(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoupon", reflect.TypeOf((*MockStore)(nil).DeleteCoupon), arg0, arg1)
}

// DeleteOrder mocks base method.
func (m *MockStore) DeleteOrder(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockStoreMockRecorder) DeleteOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockStore)(nil).DeleteOrder), arg0, arg1)
}

// DeleteOrderCouponByCouponId mocks base method.
func (m *MockStore) DeleteOrderCouponByCouponId(arg0 context.Context, arg1 pgtype.Int4) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderCouponByCouponId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderCouponByCouponId indicates an expected call of DeleteOrderCouponByCouponId.
func (mr *MockStoreMockRecorder) DeleteOrderCouponByCouponId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderCouponByCouponId", reflect.TypeOf((*MockStore)(nil).DeleteOrderCouponByCouponId), arg0, arg1)
}

// DeleteOrderCouponByOrderId mocks base method.
func (m *MockStore) DeleteOrderCouponByOrderId(arg0 context.Context, arg1 pgtype.Int4) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderCouponByOrderId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderCouponByOrderId indicates an expected call of DeleteOrderCouponByOrderId.
func (mr *MockStoreMockRecorder) DeleteOrderCouponByOrderId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderCouponByOrderId", reflect.TypeOf((*MockStore)(nil).DeleteOrderCouponByOrderId), arg0, arg1)
}

// DeleteOrderProductByOrderId mocks base method.
func (m *MockStore) DeleteOrderProductByOrderId(arg0 context.Context, arg1 pgtype.Int4) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderProductByOrderId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderProductByOrderId indicates an expected call of DeleteOrderProductByOrderId.
func (mr *MockStoreMockRecorder) DeleteOrderProductByOrderId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderProductByOrderId", reflect.TypeOf((*MockStore)(nil).DeleteOrderProductByOrderId), arg0, arg1)
}

// DeleteOrderProductByProductId mocks base method.
func (m *MockStore) DeleteOrderProductByProductId(arg0 context.Context, arg1 pgtype.Int4) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderProductByProductId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderProductByProductId indicates an expected call of DeleteOrderProductByProductId.
func (mr *MockStoreMockRecorder) DeleteOrderProductByProductId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderProductByProductId", reflect.TypeOf((*MockStore)(nil).DeleteOrderProductByProductId), arg0, arg1)
}

// DeleteOrderTx mocks base method.
func (m *MockStore) DeleteOrderTx(arg0 context.Context, arg1 db.DeleteOrderTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderTx indicates an expected call of DeleteOrderTx.
func (mr *MockStoreMockRecorder) DeleteOrderTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderTx", reflect.TypeOf((*MockStore)(nil).DeleteOrderTx), arg0, arg1)
}

// DeleteOrderUserByOrderId mocks base method.
func (m *MockStore) DeleteOrderUserByOrderId(arg0 context.Context, arg1 pgtype.Int4) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderUserByOrderId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderUserByOrderId indicates an expected call of DeleteOrderUserByOrderId.
func (mr *MockStoreMockRecorder) DeleteOrderUserByOrderId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderUserByOrderId", reflect.TypeOf((*MockStore)(nil).DeleteOrderUserByOrderId), arg0, arg1)
}

// DeleteOrderUserByUserId mocks base method.
func (m *MockStore) DeleteOrderUserByUserId(arg0 context.Context, arg1 pgtype.Int4) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderUserByUserId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderUserByUserId indicates an expected call of DeleteOrderUserByUserId.
func (mr *MockStoreMockRecorder) DeleteOrderUserByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderUserByUserId", reflect.TypeOf((*MockStore)(nil).DeleteOrderUserByUserId), arg0, arg1)
}

// DeletePermission mocks base method.
func (m *MockStore) DeletePermission(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockStoreMockRecorder) DeletePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockStore)(nil).DeletePermission), arg0, arg1)
}

// DeleteProduct mocks base method.
func (m *MockStore) DeleteProduct(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockStoreMockRecorder) DeleteProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockStore)(nil).DeleteProduct), arg0, arg1)
}

// DeleteRole mocks base method.
func (m *MockStore) DeleteRole(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockStoreMockRecorder) DeleteRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockStore)(nil).DeleteRole), arg0, arg1)
}

// DeleteRolePermissionByPermissionId mocks base method.
func (m *MockStore) DeleteRolePermissionByPermissionId(arg0 context.Context, arg1 pgtype.Int4) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRolePermissionByPermissionId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRolePermissionByPermissionId indicates an expected call of DeleteRolePermissionByPermissionId.
func (mr *MockStoreMockRecorder) DeleteRolePermissionByPermissionId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRolePermissionByPermissionId", reflect.TypeOf((*MockStore)(nil).DeleteRolePermissionByPermissionId), arg0, arg1)
}

// DeleteRolePermissionByRoleId mocks base method.
func (m *MockStore) DeleteRolePermissionByRoleId(arg0 context.Context, arg1 pgtype.Int4) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRolePermissionByRoleId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRolePermissionByRoleId indicates an expected call of DeleteRolePermissionByRoleId.
func (mr *MockStoreMockRecorder) DeleteRolePermissionByRoleId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRolePermissionByRoleId", reflect.TypeOf((*MockStore)(nil).DeleteRolePermissionByRoleId), arg0, arg1)
}

// DeleteRoleTx mocks base method.
func (m *MockStore) DeleteRoleTx(arg0 context.Context, arg1 db.DeleteRoleTxParams) (db.DeleteRoleTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleTx", arg0, arg1)
	ret0, _ := ret[0].(db.DeleteRoleTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoleTx indicates an expected call of DeleteRoleTx.
func (mr *MockStoreMockRecorder) DeleteRoleTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleTx", reflect.TypeOf((*MockStore)(nil).DeleteRoleTx), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetAdminUser mocks base method.
func (m *MockStore) GetAdminUser(arg0 context.Context, arg1 int64) (db.AdminUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminUser", arg0, arg1)
	ret0, _ := ret[0].(db.AdminUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminUser indicates an expected call of GetAdminUser.
func (mr *MockStoreMockRecorder) GetAdminUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminUser", reflect.TypeOf((*MockStore)(nil).GetAdminUser), arg0, arg1)
}

// GetAdminUserByAccount mocks base method.
func (m *MockStore) GetAdminUserByAccount(arg0 context.Context, arg1 string) (db.AdminUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminUserByAccount", arg0, arg1)
	ret0, _ := ret[0].(db.AdminUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminUserByAccount indicates an expected call of GetAdminUserByAccount.
func (mr *MockStoreMockRecorder) GetAdminUserByAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminUserByAccount", reflect.TypeOf((*MockStore)(nil).GetAdminUserByAccount), arg0, arg1)
}

// GetAdminUsersCount mocks base method.
func (m *MockStore) GetAdminUsersCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminUsersCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminUsersCount indicates an expected call of GetAdminUsersCount.
func (mr *MockStoreMockRecorder) GetAdminUsersCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminUsersCount", reflect.TypeOf((*MockStore)(nil).GetAdminUsersCount), arg0)
}

// GetCart mocks base method.
func (m *MockStore) GetCart(arg0 context.Context, arg1 int64) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockStoreMockRecorder) GetCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockStore)(nil).GetCart), arg0, arg1)
}

// GetCartByOwner mocks base method.
func (m *MockStore) GetCartByOwner(arg0 context.Context, arg1 pgtype.Text) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartByOwner", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartByOwner indicates an expected call of GetCartByOwner.
func (mr *MockStoreMockRecorder) GetCartByOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartByOwner", reflect.TypeOf((*MockStore)(nil).GetCartByOwner), arg0, arg1)
}

// GetCartCoupon mocks base method.
func (m *MockStore) GetCartCoupon(arg0 context.Context, arg1 db.GetCartCouponParams) (db.CartCoupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartCoupon", arg0, arg1)
	ret0, _ := ret[0].(db.CartCoupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartCoupon indicates an expected call of GetCartCoupon.
func (mr *MockStoreMockRecorder) GetCartCoupon(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartCoupon", reflect.TypeOf((*MockStore)(nil).GetCartCoupon), arg0, arg1)
}

// GetCartProduct mocks base method.
func (m *MockStore) GetCartProduct(arg0 context.Context, arg1 db.GetCartProductParams) (db.CartProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartProduct", arg0, arg1)
	ret0, _ := ret[0].(db.CartProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartProduct indicates an expected call of GetCartProduct.
func (mr *MockStoreMockRecorder) GetCartProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartProduct", reflect.TypeOf((*MockStore)(nil).GetCartProduct), arg0, arg1)
}

// GetCoupon mocks base method.
func (m *MockStore) GetCoupon(arg0 context.Context, arg1 int64) (db.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoupon", arg0, arg1)
	ret0, _ := ret[0].(db.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoupon indicates an expected call of GetCoupon.
func (mr *MockStoreMockRecorder) GetCoupon(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoupon", reflect.TypeOf((*MockStore)(nil).GetCoupon), arg0, arg1)
}

// GetCouponByCode mocks base method.
func (m *MockStore) GetCouponByCode(arg0 context.Context, arg1 string) (db.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouponByCode", arg0, arg1)
	ret0, _ := ret[0].(db.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCouponByCode indicates an expected call of GetCouponByCode.
func (mr *MockStoreMockRecorder) GetCouponByCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouponByCode", reflect.TypeOf((*MockStore)(nil).GetCouponByCode), arg0, arg1)
}

// GetCouponsCount mocks base method.
func (m *MockStore) GetCouponsCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouponsCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCouponsCount indicates an expected call of GetCouponsCount.
func (mr *MockStoreMockRecorder) GetCouponsCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouponsCount", reflect.TypeOf((*MockStore)(nil).GetCouponsCount), arg0)
}

// GetGender mocks base method.
func (m *MockStore) GetGender(arg0 context.Context, arg1 int64) (db.Gender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGender", arg0, arg1)
	ret0, _ := ret[0].(db.Gender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGender indicates an expected call of GetGender.
func (mr *MockStoreMockRecorder) GetGender(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGender", reflect.TypeOf((*MockStore)(nil).GetGender), arg0, arg1)
}

// GetOrder mocks base method.
func (m *MockStore) GetOrder(arg0 context.Context, arg1 int64) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStoreMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStore)(nil).GetOrder), arg0, arg1)
}

// GetOrderCoupon mocks base method.
func (m *MockStore) GetOrderCoupon(arg0 context.Context, arg1 db.GetOrderCouponParams) (db.OrderCoupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderCoupon", arg0, arg1)
	ret0, _ := ret[0].(db.OrderCoupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderCoupon indicates an expected call of GetOrderCoupon.
func (mr *MockStoreMockRecorder) GetOrderCoupon(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderCoupon", reflect.TypeOf((*MockStore)(nil).GetOrderCoupon), arg0, arg1)
}

// GetOrderProduct mocks base method.
func (m *MockStore) GetOrderProduct(arg0 context.Context, arg1 db.GetOrderProductParams) (db.OrderProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderProduct", arg0, arg1)
	ret0, _ := ret[0].(db.OrderProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderProduct indicates an expected call of GetOrderProduct.
func (mr *MockStoreMockRecorder) GetOrderProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderProduct", reflect.TypeOf((*MockStore)(nil).GetOrderProduct), arg0, arg1)
}

// GetOrderStatus mocks base method.
func (m *MockStore) GetOrderStatus(arg0 context.Context, arg1 int64) (db.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatus", arg0, arg1)
	ret0, _ := ret[0].(db.OrderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderStatus indicates an expected call of GetOrderStatus.
func (mr *MockStoreMockRecorder) GetOrderStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatus", reflect.TypeOf((*MockStore)(nil).GetOrderStatus), arg0, arg1)
}

// GetOrderStatusCount mocks base method.
func (m *MockStore) GetOrderStatusCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatusCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderStatusCount indicates an expected call of GetOrderStatusCount.
func (mr *MockStoreMockRecorder) GetOrderStatusCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatusCount", reflect.TypeOf((*MockStore)(nil).GetOrderStatusCount), arg0)
}

// GetOrderUser mocks base method.
func (m *MockStore) GetOrderUser(arg0 context.Context, arg1 db.GetOrderUserParams) (db.OrderUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderUser", arg0, arg1)
	ret0, _ := ret[0].(db.OrderUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderUser indicates an expected call of GetOrderUser.
func (mr *MockStoreMockRecorder) GetOrderUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderUser", reflect.TypeOf((*MockStore)(nil).GetOrderUser), arg0, arg1)
}

// GetOrdersCount mocks base method.
func (m *MockStore) GetOrdersCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersCount indicates an expected call of GetOrdersCount.
func (mr *MockStoreMockRecorder) GetOrdersCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersCount", reflect.TypeOf((*MockStore)(nil).GetOrdersCount), arg0)
}

// GetPayMethod mocks base method.
func (m *MockStore) GetPayMethod(arg0 context.Context, arg1 int64) (db.PayMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayMethod", arg0, arg1)
	ret0, _ := ret[0].(db.PayMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayMethod indicates an expected call of GetPayMethod.
func (mr *MockStoreMockRecorder) GetPayMethod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayMethod", reflect.TypeOf((*MockStore)(nil).GetPayMethod), arg0, arg1)
}

// GetPayMethodCount mocks base method.
func (m *MockStore) GetPayMethodCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayMethodCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayMethodCount indicates an expected call of GetPayMethodCount.
func (mr *MockStoreMockRecorder) GetPayMethodCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayMethodCount", reflect.TypeOf((*MockStore)(nil).GetPayMethodCount), arg0)
}

// GetPermission mocks base method.
func (m *MockStore) GetPermission(arg0 context.Context, arg1 int64) (db.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", arg0, arg1)
	ret0, _ := ret[0].(db.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockStoreMockRecorder) GetPermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockStore)(nil).GetPermission), arg0, arg1)
}

// GetProduct mocks base method.
func (m *MockStore) GetProduct(arg0 context.Context, arg1 int64) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockStoreMockRecorder) GetProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockStore)(nil).GetProduct), arg0, arg1)
}

// GetProductsCount mocks base method.
func (m *MockStore) GetProductsCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsCount indicates an expected call of GetProductsCount.
func (mr *MockStoreMockRecorder) GetProductsCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsCount", reflect.TypeOf((*MockStore)(nil).GetProductsCount), arg0)
}

// GetRole mocks base method.
func (m *MockStore) GetRole(arg0 context.Context, arg1 int64) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockStoreMockRecorder) GetRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockStore)(nil).GetRole), arg0, arg1)
}

// GetRolePermission mocks base method.
func (m *MockStore) GetRolePermission(arg0 context.Context, arg1 db.GetRolePermissionParams) (db.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolePermission", arg0, arg1)
	ret0, _ := ret[0].(db.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolePermission indicates an expected call of GetRolePermission.
func (mr *MockStoreMockRecorder) GetRolePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolePermission", reflect.TypeOf((*MockStore)(nil).GetRolePermission), arg0, arg1)
}

// GetRolesCount mocks base method.
func (m *MockStore) GetRolesCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesCount indicates an expected call of GetRolesCount.
func (mr *MockStoreMockRecorder) GetRolesCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesCount", reflect.TypeOf((*MockStore)(nil).GetRolesCount), arg0)
}

// GetSesstion mocks base method.
func (m *MockStore) GetSesstion(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSesstion", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSesstion indicates an expected call of GetSesstion.
func (mr *MockStoreMockRecorder) GetSesstion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSesstion", reflect.TypeOf((*MockStore)(nil).GetSesstion), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserByAccount mocks base method.
func (m *MockStore) GetUserByAccount(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAccount", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAccount indicates an expected call of GetUserByAccount.
func (mr *MockStoreMockRecorder) GetUserByAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAccount", reflect.TypeOf((*MockStore)(nil).GetUserByAccount), arg0, arg1)
}

// GetUsersCount mocks base method.
func (m *MockStore) GetUsersCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersCount indicates an expected call of GetUsersCount.
func (mr *MockStoreMockRecorder) GetUsersCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersCount", reflect.TypeOf((*MockStore)(nil).GetUsersCount), arg0)
}

// ListAdminUsers mocks base method.
func (m *MockStore) ListAdminUsers(arg0 context.Context, arg1 db.ListAdminUsersParams) ([]db.AdminUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdminUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.AdminUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdminUsers indicates an expected call of ListAdminUsers.
func (mr *MockStoreMockRecorder) ListAdminUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdminUsers", reflect.TypeOf((*MockStore)(nil).ListAdminUsers), arg0, arg1)
}

// ListCartCouponByCartId mocks base method.
func (m *MockStore) ListCartCouponByCartId(arg0 context.Context, arg1 pgtype.Int4) ([]db.CartCoupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCartCouponByCartId", arg0, arg1)
	ret0, _ := ret[0].([]db.CartCoupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCartCouponByCartId indicates an expected call of ListCartCouponByCartId.
func (mr *MockStoreMockRecorder) ListCartCouponByCartId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCartCouponByCartId", reflect.TypeOf((*MockStore)(nil).ListCartCouponByCartId), arg0, arg1)
}

// ListCartCouponByCouponId mocks base method.
func (m *MockStore) ListCartCouponByCouponId(arg0 context.Context, arg1 pgtype.Int4) ([]db.CartCoupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCartCouponByCouponId", arg0, arg1)
	ret0, _ := ret[0].([]db.CartCoupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCartCouponByCouponId indicates an expected call of ListCartCouponByCouponId.
func (mr *MockStoreMockRecorder) ListCartCouponByCouponId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCartCouponByCouponId", reflect.TypeOf((*MockStore)(nil).ListCartCouponByCouponId), arg0, arg1)
}

// ListCartProductByCartId mocks base method.
func (m *MockStore) ListCartProductByCartId(arg0 context.Context, arg1 pgtype.Int4) ([]db.CartProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCartProductByCartId", arg0, arg1)
	ret0, _ := ret[0].([]db.CartProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCartProductByCartId indicates an expected call of ListCartProductByCartId.
func (mr *MockStoreMockRecorder) ListCartProductByCartId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCartProductByCartId", reflect.TypeOf((*MockStore)(nil).ListCartProductByCartId), arg0, arg1)
}

// ListCartProductByProductId mocks base method.
func (m *MockStore) ListCartProductByProductId(arg0 context.Context, arg1 pgtype.Int4) ([]db.CartProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCartProductByProductId", arg0, arg1)
	ret0, _ := ret[0].([]db.CartProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCartProductByProductId indicates an expected call of ListCartProductByProductId.
func (mr *MockStoreMockRecorder) ListCartProductByProductId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCartProductByProductId", reflect.TypeOf((*MockStore)(nil).ListCartProductByProductId), arg0, arg1)
}

// ListCoupons mocks base method.
func (m *MockStore) ListCoupons(arg0 context.Context, arg1 db.ListCouponsParams) ([]db.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoupons", arg0, arg1)
	ret0, _ := ret[0].([]db.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoupons indicates an expected call of ListCoupons.
func (mr *MockStoreMockRecorder) ListCoupons(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoupons", reflect.TypeOf((*MockStore)(nil).ListCoupons), arg0, arg1)
}

// ListGenders mocks base method.
func (m *MockStore) ListGenders(arg0 context.Context) ([]db.Gender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGenders", arg0)
	ret0, _ := ret[0].([]db.Gender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGenders indicates an expected call of ListGenders.
func (mr *MockStoreMockRecorder) ListGenders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGenders", reflect.TypeOf((*MockStore)(nil).ListGenders), arg0)
}

// ListOrderCouponByCouponId mocks base method.
func (m *MockStore) ListOrderCouponByCouponId(arg0 context.Context, arg1 pgtype.Int4) ([]db.OrderCoupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderCouponByCouponId", arg0, arg1)
	ret0, _ := ret[0].([]db.OrderCoupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderCouponByCouponId indicates an expected call of ListOrderCouponByCouponId.
func (mr *MockStoreMockRecorder) ListOrderCouponByCouponId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderCouponByCouponId", reflect.TypeOf((*MockStore)(nil).ListOrderCouponByCouponId), arg0, arg1)
}

// ListOrderCouponByOrderId mocks base method.
func (m *MockStore) ListOrderCouponByOrderId(arg0 context.Context, arg1 pgtype.Int4) ([]db.OrderCoupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderCouponByOrderId", arg0, arg1)
	ret0, _ := ret[0].([]db.OrderCoupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderCouponByOrderId indicates an expected call of ListOrderCouponByOrderId.
func (mr *MockStoreMockRecorder) ListOrderCouponByOrderId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderCouponByOrderId", reflect.TypeOf((*MockStore)(nil).ListOrderCouponByOrderId), arg0, arg1)
}

// ListOrderProductByOrderId mocks base method.
func (m *MockStore) ListOrderProductByOrderId(arg0 context.Context, arg1 pgtype.Int4) ([]db.OrderProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderProductByOrderId", arg0, arg1)
	ret0, _ := ret[0].([]db.OrderProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderProductByOrderId indicates an expected call of ListOrderProductByOrderId.
func (mr *MockStoreMockRecorder) ListOrderProductByOrderId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderProductByOrderId", reflect.TypeOf((*MockStore)(nil).ListOrderProductByOrderId), arg0, arg1)
}

// ListOrderProductByProductId mocks base method.
func (m *MockStore) ListOrderProductByProductId(arg0 context.Context, arg1 pgtype.Int4) ([]db.OrderProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderProductByProductId", arg0, arg1)
	ret0, _ := ret[0].([]db.OrderProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderProductByProductId indicates an expected call of ListOrderProductByProductId.
func (mr *MockStoreMockRecorder) ListOrderProductByProductId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderProductByProductId", reflect.TypeOf((*MockStore)(nil).ListOrderProductByProductId), arg0, arg1)
}

// ListOrderStatus mocks base method.
func (m *MockStore) ListOrderStatus(arg0 context.Context) ([]db.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderStatus", arg0)
	ret0, _ := ret[0].([]db.OrderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderStatus indicates an expected call of ListOrderStatus.
func (mr *MockStoreMockRecorder) ListOrderStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderStatus", reflect.TypeOf((*MockStore)(nil).ListOrderStatus), arg0)
}

// ListOrderUserByOrderId mocks base method.
func (m *MockStore) ListOrderUserByOrderId(arg0 context.Context, arg1 pgtype.Int4) ([]db.OrderUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderUserByOrderId", arg0, arg1)
	ret0, _ := ret[0].([]db.OrderUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderUserByOrderId indicates an expected call of ListOrderUserByOrderId.
func (mr *MockStoreMockRecorder) ListOrderUserByOrderId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderUserByOrderId", reflect.TypeOf((*MockStore)(nil).ListOrderUserByOrderId), arg0, arg1)
}

// ListOrderUserByUserId mocks base method.
func (m *MockStore) ListOrderUserByUserId(arg0 context.Context, arg1 pgtype.Int4) ([]db.OrderUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderUserByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.OrderUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderUserByUserId indicates an expected call of ListOrderUserByUserId.
func (mr *MockStoreMockRecorder) ListOrderUserByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderUserByUserId", reflect.TypeOf((*MockStore)(nil).ListOrderUserByUserId), arg0, arg1)
}

// ListOrders mocks base method.
func (m *MockStore) ListOrders(arg0 context.Context, arg1 db.ListOrdersParams) ([]db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", arg0, arg1)
	ret0, _ := ret[0].([]db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockStoreMockRecorder) ListOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockStore)(nil).ListOrders), arg0, arg1)
}

// ListPayMethod mocks base method.
func (m *MockStore) ListPayMethod(arg0 context.Context) ([]db.PayMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPayMethod", arg0)
	ret0, _ := ret[0].([]db.PayMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPayMethod indicates an expected call of ListPayMethod.
func (mr *MockStoreMockRecorder) ListPayMethod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPayMethod", reflect.TypeOf((*MockStore)(nil).ListPayMethod), arg0)
}

// ListPermissions mocks base method.
func (m *MockStore) ListPermissions(arg0 context.Context, arg1 db.ListPermissionsParams) ([]db.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissions", arg0, arg1)
	ret0, _ := ret[0].([]db.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissions indicates an expected call of ListPermissions.
func (mr *MockStoreMockRecorder) ListPermissions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissions", reflect.TypeOf((*MockStore)(nil).ListPermissions), arg0, arg1)
}

// ListPermissionsForAdminUser mocks base method.
func (m *MockStore) ListPermissionsForAdminUser(arg0 context.Context, arg1 int64) ([]db.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionsForAdminUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionsForAdminUser indicates an expected call of ListPermissionsForAdminUser.
func (mr *MockStoreMockRecorder) ListPermissionsForAdminUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsForAdminUser", reflect.TypeOf((*MockStore)(nil).ListPermissionsForAdminUser), arg0, arg1)
}

// ListPermissionsForRole mocks base method.
func (m *MockStore) ListPermissionsForRole(arg0 context.Context, arg1 int64) ([]db.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionsForRole", arg0, arg1)
	ret0, _ := ret[0].([]db.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionsForRole indicates an expected call of ListPermissionsForRole.
func (mr *MockStoreMockRecorder) ListPermissionsForRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsForRole", reflect.TypeOf((*MockStore)(nil).ListPermissionsForRole), arg0, arg1)
}

// ListPermissionsIDByAccount mocks base method.
func (m *MockStore) ListPermissionsIDByAccount(arg0 context.Context, arg1 string) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionsIDByAccount", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionsIDByAccount indicates an expected call of ListPermissionsIDByAccount.
func (mr *MockStoreMockRecorder) ListPermissionsIDByAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsIDByAccount", reflect.TypeOf((*MockStore)(nil).ListPermissionsIDByAccount), arg0, arg1)
}

// ListProducts mocks base method.
func (m *MockStore) ListProducts(arg0 context.Context, arg1 db.ListProductsParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", arg0, arg1)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockStoreMockRecorder) ListProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockStore)(nil).ListProducts), arg0, arg1)
}

// ListRolePermissionByPermissionId mocks base method.
func (m *MockStore) ListRolePermissionByPermissionId(arg0 context.Context, arg1 pgtype.Int4) ([]db.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRolePermissionByPermissionId", arg0, arg1)
	ret0, _ := ret[0].([]db.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRolePermissionByPermissionId indicates an expected call of ListRolePermissionByPermissionId.
func (mr *MockStoreMockRecorder) ListRolePermissionByPermissionId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRolePermissionByPermissionId", reflect.TypeOf((*MockStore)(nil).ListRolePermissionByPermissionId), arg0, arg1)
}

// ListRolePermissionByRoleId mocks base method.
func (m *MockStore) ListRolePermissionByRoleId(arg0 context.Context, arg1 pgtype.Int4) ([]db.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRolePermissionByRoleId", arg0, arg1)
	ret0, _ := ret[0].([]db.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRolePermissionByRoleId indicates an expected call of ListRolePermissionByRoleId.
func (mr *MockStoreMockRecorder) ListRolePermissionByRoleId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRolePermissionByRoleId", reflect.TypeOf((*MockStore)(nil).ListRolePermissionByRoleId), arg0, arg1)
}

// ListRoles mocks base method.
func (m *MockStore) ListRoles(arg0 context.Context, arg1 db.ListRolesParams) ([]db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", arg0, arg1)
	ret0, _ := ret[0].([]db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockStoreMockRecorder) ListRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockStore)(nil).ListRoles), arg0, arg1)
}

// ListRolesOption mocks base method.
func (m *MockStore) ListRolesOption(arg0 context.Context) ([]db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRolesOption", arg0)
	ret0, _ := ret[0].([]db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRolesOption indicates an expected call of ListRolesOption.
func (mr *MockStoreMockRecorder) ListRolesOption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRolesOption", reflect.TypeOf((*MockStore)(nil).ListRolesOption), arg0)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// UpdateAdminUser mocks base method.
func (m *MockStore) UpdateAdminUser(arg0 context.Context, arg1 db.UpdateAdminUserParams) (db.AdminUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdminUser", arg0, arg1)
	ret0, _ := ret[0].(db.AdminUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdminUser indicates an expected call of UpdateAdminUser.
func (mr *MockStoreMockRecorder) UpdateAdminUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdminUser", reflect.TypeOf((*MockStore)(nil).UpdateAdminUser), arg0, arg1)
}

// UpdateCart mocks base method.
func (m *MockStore) UpdateCart(arg0 context.Context, arg1 db.UpdateCartParams) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCart", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCart indicates an expected call of UpdateCart.
func (mr *MockStoreMockRecorder) UpdateCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCart", reflect.TypeOf((*MockStore)(nil).UpdateCart), arg0, arg1)
}

// UpdateCartProduct mocks base method.
func (m *MockStore) UpdateCartProduct(arg0 context.Context, arg1 db.UpdateCartProductParams) (db.CartProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartProduct", arg0, arg1)
	ret0, _ := ret[0].(db.CartProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCartProduct indicates an expected call of UpdateCartProduct.
func (mr *MockStoreMockRecorder) UpdateCartProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartProduct", reflect.TypeOf((*MockStore)(nil).UpdateCartProduct), arg0, arg1)
}

// UpdateCoupon mocks base method.
func (m *MockStore) UpdateCoupon(arg0 context.Context, arg1 db.UpdateCouponParams) (db.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoupon", arg0, arg1)
	ret0, _ := ret[0].(db.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCoupon indicates an expected call of UpdateCoupon.
func (mr *MockStoreMockRecorder) UpdateCoupon(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoupon", reflect.TypeOf((*MockStore)(nil).UpdateCoupon), arg0, arg1)
}

// UpdateOrder mocks base method.
func (m *MockStore) UpdateOrder(arg0 context.Context, arg1 db.UpdateOrderParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockStoreMockRecorder) UpdateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockStore)(nil).UpdateOrder), arg0, arg1)
}

// UpdateOrderCouponByOrderId mocks base method.
func (m *MockStore) UpdateOrderCouponByOrderId(arg0 context.Context, arg1 db.UpdateOrderCouponByOrderIdParams) (db.OrderCoupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderCouponByOrderId", arg0, arg1)
	ret0, _ := ret[0].(db.OrderCoupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderCouponByOrderId indicates an expected call of UpdateOrderCouponByOrderId.
func (mr *MockStoreMockRecorder) UpdateOrderCouponByOrderId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderCouponByOrderId", reflect.TypeOf((*MockStore)(nil).UpdateOrderCouponByOrderId), arg0, arg1)
}

// UpdateOrderProduct mocks base method.
func (m *MockStore) UpdateOrderProduct(arg0 context.Context, arg1 db.UpdateOrderProductParams) (db.OrderProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderProduct", arg0, arg1)
	ret0, _ := ret[0].(db.OrderProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderProduct indicates an expected call of UpdateOrderProduct.
func (mr *MockStoreMockRecorder) UpdateOrderProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderProduct", reflect.TypeOf((*MockStore)(nil).UpdateOrderProduct), arg0, arg1)
}

// UpdateOrderTx mocks base method.
func (m *MockStore) UpdateOrderTx(arg0 context.Context, arg1 db.UpdateOrderTxParams) (db.OrderTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderTx", arg0, arg1)
	ret0, _ := ret[0].(db.OrderTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderTx indicates an expected call of UpdateOrderTx.
func (mr *MockStoreMockRecorder) UpdateOrderTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderTx", reflect.TypeOf((*MockStore)(nil).UpdateOrderTx), arg0, arg1)
}

// UpdatePermission mocks base method.
func (m *MockStore) UpdatePermission(arg0 context.Context, arg1 db.UpdatePermissionParams) (db.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", arg0, arg1)
	ret0, _ := ret[0].(db.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockStoreMockRecorder) UpdatePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockStore)(nil).UpdatePermission), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockStore) UpdateProduct(arg0 context.Context, arg1 db.UpdateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockStoreMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockStore)(nil).UpdateProduct), arg0, arg1)
}

// UpdateRole mocks base method.
func (m *MockStore) UpdateRole(arg0 context.Context, arg1 db.UpdateRoleParams) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockStoreMockRecorder) UpdateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockStore)(nil).UpdateRole), arg0, arg1)
}

// UpdateRoleTx mocks base method.
func (m *MockStore) UpdateRoleTx(arg0 context.Context, arg1 db.UpdateRoleTxParams) (db.RoleTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoleTx", arg0, arg1)
	ret0, _ := ret[0].(db.RoleTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoleTx indicates an expected call of UpdateRoleTx.
func (mr *MockStoreMockRecorder) UpdateRoleTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleTx", reflect.TypeOf((*MockStore)(nil).UpdateRoleTx), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
